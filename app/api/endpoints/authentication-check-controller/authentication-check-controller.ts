/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Ï†ïÏÖòÏùò API Î™ÖÏÑ∏ÏÑú
 * API Î™ÖÏÑ∏ÏÑú
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';





export const test = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    
    
    return axios.post(
      `/api/test`,undefined,{
        responseType: 'text',
    ...options,}
    );
  }



export const getTestMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof test>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof test>>, TError,void, TContext> => {

const mutationKey = ['test'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof test>>, void> = () => {
          

          return  test(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TestMutationResult = NonNullable<Awaited<ReturnType<typeof test>>>
    
    export type TestMutationError = AxiosError<unknown>

    export const useTest = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof test>>, TError,void, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof test>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getTestMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const authcheck = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<null>> => {
    
    
    return axios.get(
      `/api/authcheck`,options
    );
  }


export const getAuthcheckQueryKey = () => {
    return [`/api/authcheck`] as const;
    }

    
export const getAuthcheckQueryOptions = <TData = Awaited<ReturnType<typeof authcheck>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authcheck>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthcheckQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authcheck>>> = ({ signal }) => authcheck({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof authcheck>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AuthcheckQueryResult = NonNullable<Awaited<ReturnType<typeof authcheck>>>
export type AuthcheckQueryError = AxiosError<unknown>


export function useAuthcheck<TData = Awaited<ReturnType<typeof authcheck>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof authcheck>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authcheck>>,
          TError,
          Awaited<ReturnType<typeof authcheck>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthcheck<TData = Awaited<ReturnType<typeof authcheck>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authcheck>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authcheck>>,
          TError,
          Awaited<ReturnType<typeof authcheck>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthcheck<TData = Awaited<ReturnType<typeof authcheck>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authcheck>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useAuthcheck<TData = Awaited<ReturnType<typeof authcheck>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authcheck>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAuthcheckQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



