/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * 정션의 API 명세서
 * API 명세서
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  ClipResDTO,
  PostVideoReqDTO,
  RandomHomeResDTO,
  RandomQuizDTO,
  RandomQuizParams,
  S3ImageBody
} from '../../model';





/**
 * MultipartFile로 영상과 관련 정보를 업로드합니다.
 * @summary 영어 영상 업로드
 */
export const s3Image = (
    s3ImageBody: S3ImageBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    
    
    return axios.post(
      `/api/s3`,
      s3ImageBody,{
        responseType: 'text',
    ...options,}
    );
  }



export const getS3ImageMutationOptions = <TError = AxiosError<string | string | string>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof s3Image>>, TError,{data: S3ImageBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof s3Image>>, TError,{data: S3ImageBody}, TContext> => {

const mutationKey = ['s3Image'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof s3Image>>, {data: S3ImageBody}> = (props) => {
          const {data} = props ?? {};

          return  s3Image(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type S3ImageMutationResult = NonNullable<Awaited<ReturnType<typeof s3Image>>>
    export type S3ImageMutationBody = S3ImageBody
    export type S3ImageMutationError = AxiosError<string | string | string>

    /**
 * @summary 영어 영상 업로드
 */
export const useS3Image = <TError = AxiosError<string | string | string>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof s3Image>>, TError,{data: S3ImageBody}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof s3Image>>,
        TError,
        {data: S3ImageBody},
        TContext
      > => {

      const mutationOptions = getS3ImageMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * 사용자가 특정 영상을 저장(PostVideoReq 기반)합니다.
 * @summary 영어 영상 저장
 */
export const postVideo = (
    postVideoReqDTO: PostVideoReqDTO, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<null>> => {
    
    
    return axios.post(
      `/api/s3/video`,
      postVideoReqDTO,options
    );
  }



export const getPostVideoMutationOptions = <TError = AxiosError<null | null | null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVideo>>, TError,{data: PostVideoReqDTO}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postVideo>>, TError,{data: PostVideoReqDTO}, TContext> => {

const mutationKey = ['postVideo'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVideo>>, {data: PostVideoReqDTO}> = (props) => {
          const {data} = props ?? {};

          return  postVideo(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVideoMutationResult = NonNullable<Awaited<ReturnType<typeof postVideo>>>
    export type PostVideoMutationBody = PostVideoReqDTO
    export type PostVideoMutationError = AxiosError<null | null | null>

    /**
 * @summary 영어 영상 저장
 */
export const usePostVideo = <TError = AxiosError<null | null | null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVideo>>, TError,{data: PostVideoReqDTO}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postVideo>>,
        TError,
        {data: PostVideoReqDTO},
        TContext
      > => {

      const mutationOptions = getPostVideoMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * videoType별 퀴즈를 랜덤으로 조회합니다.
 * @summary 퀴즈 랜덤 조회
 */
export const randomQuiz = (
    params: RandomQuizParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RandomQuizDTO>> => {
    
    
    return axios.get(
      `/api/s3/quiz`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getRandomQuizQueryKey = (params?: RandomQuizParams,) => {
    return [`/api/s3/quiz`, ...(params ? [params]: [])] as const;
    }

    
export const getRandomQuizQueryOptions = <TData = Awaited<ReturnType<typeof randomQuiz>>, TError = AxiosError<RandomQuizDTO | RandomQuizDTO | RandomQuizDTO>>(params: RandomQuizParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof randomQuiz>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRandomQuizQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof randomQuiz>>> = ({ signal }) => randomQuiz(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof randomQuiz>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RandomQuizQueryResult = NonNullable<Awaited<ReturnType<typeof randomQuiz>>>
export type RandomQuizQueryError = AxiosError<RandomQuizDTO | RandomQuizDTO | RandomQuizDTO>


export function useRandomQuiz<TData = Awaited<ReturnType<typeof randomQuiz>>, TError = AxiosError<RandomQuizDTO | RandomQuizDTO | RandomQuizDTO>>(
 params: RandomQuizParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof randomQuiz>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof randomQuiz>>,
          TError,
          Awaited<ReturnType<typeof randomQuiz>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRandomQuiz<TData = Awaited<ReturnType<typeof randomQuiz>>, TError = AxiosError<RandomQuizDTO | RandomQuizDTO | RandomQuizDTO>>(
 params: RandomQuizParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof randomQuiz>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof randomQuiz>>,
          TError,
          Awaited<ReturnType<typeof randomQuiz>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRandomQuiz<TData = Awaited<ReturnType<typeof randomQuiz>>, TError = AxiosError<RandomQuizDTO | RandomQuizDTO | RandomQuizDTO>>(
 params: RandomQuizParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof randomQuiz>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 퀴즈 랜덤 조회
 */

export function useRandomQuiz<TData = Awaited<ReturnType<typeof randomQuiz>>, TError = AxiosError<RandomQuizDTO | RandomQuizDTO | RandomQuizDTO>>(
 params: RandomQuizParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof randomQuiz>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRandomQuizQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 홈 화면에 노출할 영상을 랜덤으로 조회합니다.
 * @summary 홈 화면 랜덤 영상 조회
 */
export const randomHome = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RandomHomeResDTO[]>> => {
    
    
    return axios.get(
      `/api/s3/home`,options
    );
  }


export const getRandomHomeQueryKey = () => {
    return [`/api/s3/home`] as const;
    }

    
export const getRandomHomeQueryOptions = <TData = Awaited<ReturnType<typeof randomHome>>, TError = AxiosError<RandomHomeResDTO[] | RandomHomeResDTO[] | RandomHomeResDTO[]>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof randomHome>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRandomHomeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof randomHome>>> = ({ signal }) => randomHome({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof randomHome>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RandomHomeQueryResult = NonNullable<Awaited<ReturnType<typeof randomHome>>>
export type RandomHomeQueryError = AxiosError<RandomHomeResDTO[] | RandomHomeResDTO[] | RandomHomeResDTO[]>


export function useRandomHome<TData = Awaited<ReturnType<typeof randomHome>>, TError = AxiosError<RandomHomeResDTO[] | RandomHomeResDTO[] | RandomHomeResDTO[]>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof randomHome>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof randomHome>>,
          TError,
          Awaited<ReturnType<typeof randomHome>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRandomHome<TData = Awaited<ReturnType<typeof randomHome>>, TError = AxiosError<RandomHomeResDTO[] | RandomHomeResDTO[] | RandomHomeResDTO[]>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof randomHome>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof randomHome>>,
          TError,
          Awaited<ReturnType<typeof randomHome>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRandomHome<TData = Awaited<ReturnType<typeof randomHome>>, TError = AxiosError<RandomHomeResDTO[] | RandomHomeResDTO[] | RandomHomeResDTO[]>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof randomHome>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 홈 화면 랜덤 영상 조회
 */

export function useRandomHome<TData = Awaited<ReturnType<typeof randomHome>>, TError = AxiosError<RandomHomeResDTO[] | RandomHomeResDTO[] | RandomHomeResDTO[]>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof randomHome>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRandomHomeQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 현재 로그인한 사용자의 클립 정보를 조회합니다.
 * @summary 클립 조회
 */
export const getClip = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ClipResDTO>> => {
    
    
    return axios.get(
      `/api/s3/clip`,options
    );
  }


export const getGetClipQueryKey = () => {
    return [`/api/s3/clip`] as const;
    }

    
export const getGetClipQueryOptions = <TData = Awaited<ReturnType<typeof getClip>>, TError = AxiosError<ClipResDTO | ClipResDTO | ClipResDTO>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClip>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetClipQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getClip>>> = ({ signal }) => getClip({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getClip>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetClipQueryResult = NonNullable<Awaited<ReturnType<typeof getClip>>>
export type GetClipQueryError = AxiosError<ClipResDTO | ClipResDTO | ClipResDTO>


export function useGetClip<TData = Awaited<ReturnType<typeof getClip>>, TError = AxiosError<ClipResDTO | ClipResDTO | ClipResDTO>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClip>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClip>>,
          TError,
          Awaited<ReturnType<typeof getClip>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetClip<TData = Awaited<ReturnType<typeof getClip>>, TError = AxiosError<ClipResDTO | ClipResDTO | ClipResDTO>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClip>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClip>>,
          TError,
          Awaited<ReturnType<typeof getClip>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetClip<TData = Awaited<ReturnType<typeof getClip>>, TError = AxiosError<ClipResDTO | ClipResDTO | ClipResDTO>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClip>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 클립 조회
 */

export function useGetClip<TData = Awaited<ReturnType<typeof getClip>>, TError = AxiosError<ClipResDTO | ClipResDTO | ClipResDTO>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getClip>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetClipQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



