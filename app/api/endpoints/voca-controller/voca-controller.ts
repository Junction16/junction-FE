/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * 정션의 API 명세서
 * API 명세서
 * OpenAPI spec version: v1
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  VocaAIParams,
  VocaAIResDTO,
  VocaSelectParams,
  VocaSelectResDTO
} from '../../model';





/**
 * 현재 로그인한 사용자의 저장된 단어 목록을 반환합니다.
 * @summary 영어 단어 조회 마이페이지
 */
export const vocaSelect = (
    params: VocaSelectParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<VocaSelectResDTO>> => {
    
    
    return axios.get(
      `/api/voca`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getVocaSelectQueryKey = (params?: VocaSelectParams,) => {
    return [`/api/voca`, ...(params ? [params]: [])] as const;
    }

    
export const getVocaSelectQueryOptions = <TData = Awaited<ReturnType<typeof vocaSelect>>, TError = AxiosError<VocaSelectResDTO | VocaSelectResDTO>>(params: VocaSelectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof vocaSelect>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getVocaSelectQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof vocaSelect>>> = ({ signal }) => vocaSelect(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof vocaSelect>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type VocaSelectQueryResult = NonNullable<Awaited<ReturnType<typeof vocaSelect>>>
export type VocaSelectQueryError = AxiosError<VocaSelectResDTO | VocaSelectResDTO>


export function useVocaSelect<TData = Awaited<ReturnType<typeof vocaSelect>>, TError = AxiosError<VocaSelectResDTO | VocaSelectResDTO>>(
 params: VocaSelectParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof vocaSelect>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof vocaSelect>>,
          TError,
          Awaited<ReturnType<typeof vocaSelect>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useVocaSelect<TData = Awaited<ReturnType<typeof vocaSelect>>, TError = AxiosError<VocaSelectResDTO | VocaSelectResDTO>>(
 params: VocaSelectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof vocaSelect>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof vocaSelect>>,
          TError,
          Awaited<ReturnType<typeof vocaSelect>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useVocaSelect<TData = Awaited<ReturnType<typeof vocaSelect>>, TError = AxiosError<VocaSelectResDTO | VocaSelectResDTO>>(
 params: VocaSelectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof vocaSelect>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 영어 단어 조회 마이페이지
 */

export function useVocaSelect<TData = Awaited<ReturnType<typeof vocaSelect>>, TError = AxiosError<VocaSelectResDTO | VocaSelectResDTO>>(
 params: VocaSelectParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof vocaSelect>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getVocaSelectQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 선택한 단어 유형(vocaType)에 따라 AI가 단어 5개를 생성 및 DB에 저장 후 반환합니다.
 * @summary 영어 단어 AI 등록 및 반환
 */
export const vocaAI = (
    params: VocaAIParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<VocaAIResDTO[]>> => {
    
    
    return axios.get(
      `/api/voca/ai`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getVocaAIQueryKey = (params?: VocaAIParams,) => {
    return [`/api/voca/ai`, ...(params ? [params]: [])] as const;
    }

    
export const getVocaAIQueryOptions = <TData = Awaited<ReturnType<typeof vocaAI>>, TError = AxiosError<VocaAIResDTO[] | VocaAIResDTO[]>>(params: VocaAIParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof vocaAI>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getVocaAIQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof vocaAI>>> = ({ signal }) => vocaAI(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof vocaAI>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type VocaAIQueryResult = NonNullable<Awaited<ReturnType<typeof vocaAI>>>
export type VocaAIQueryError = AxiosError<VocaAIResDTO[] | VocaAIResDTO[]>


export function useVocaAI<TData = Awaited<ReturnType<typeof vocaAI>>, TError = AxiosError<VocaAIResDTO[] | VocaAIResDTO[]>>(
 params: VocaAIParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof vocaAI>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof vocaAI>>,
          TError,
          Awaited<ReturnType<typeof vocaAI>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useVocaAI<TData = Awaited<ReturnType<typeof vocaAI>>, TError = AxiosError<VocaAIResDTO[] | VocaAIResDTO[]>>(
 params: VocaAIParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof vocaAI>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof vocaAI>>,
          TError,
          Awaited<ReturnType<typeof vocaAI>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useVocaAI<TData = Awaited<ReturnType<typeof vocaAI>>, TError = AxiosError<VocaAIResDTO[] | VocaAIResDTO[]>>(
 params: VocaAIParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof vocaAI>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 영어 단어 AI 등록 및 반환
 */

export function useVocaAI<TData = Awaited<ReturnType<typeof vocaAI>>, TError = AxiosError<VocaAIResDTO[] | VocaAIResDTO[]>>(
 params: VocaAIParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof vocaAI>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getVocaAIQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



